{"version":3,"sources":["components/DisplayCounter.tsx","components/InputElement.tsx","components/Settings.tsx","components/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DisplayCounter","props","isDisabled","error","counter","maxValue","Box","InputLabel","style","margin","className","Button","variant","size","color","disabled","onClick","increaseValue","resetValue","InputElement","value","changeValue","restProps","Input","type","onChange","e","currentTarget","Settings","errorMax","minValue","errorMin","setMaxValue","setMinValue","justifyContent","startIcon","Save","setDisplayValue","errorState","Counter","useState","countValue","setCountValue","setError","setErrorState","errorCase","useEffect","maxAsString","localStorage","getItem","JSON","parse","minAsString","setItem","stringify","Container","fixed","Grid","container","spacing","padding","justify","alignItems","Paper","elevation","val","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a221342f.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Box, Button, InputLabel} from '@material-ui/core';\r\n\r\n\r\nexport type DisplayCounterType = {\r\n    increaseValue: () => void\r\n    resetValue: () => void\r\n    counter: number | string\r\n    maxValue: number\r\n    minValue: number\r\n    errorCase: () => void\r\n    error: string\r\n    errorState: boolean\r\n}\r\n\r\nexport function DisplayCounter(props: DisplayCounterType) {\r\n     let isDisabled =props.error === \"incorrect value\" ||\r\n     props.error === \"enter value and press set\" ||\r\n     props.counter===props.maxValue\r\n\r\n    return (\r\n        <Box>\r\n            <InputLabel style={{margin: 100 }}\r\n                error={isDisabled}\r\n                        margin={'dense'}\r\n            >\r\n\r\n                {(props.error === \"incorrect value\" ||\r\n                    props.error === \"enter value and press set\")\r\n                    ? props.error : props.counter}\r\n            </InputLabel >\r\n            <Box className=\"buttons-block\">\r\n                <Button style={{margin: \"10px\"}}\r\n                    variant='contained'\r\n                        size={'large'}\r\n                        color={\"primary\"}\r\n                        className=\"button-style\"\r\n                        disabled={props.counter === props.maxValue}\r\n                        onClick={props.increaseValue}>\r\n                    INC\r\n                </Button>\r\n                <Button style={{margin: \"10px\"}}\r\n                    variant='contained'\r\n                    color={\"primary\"}\r\n                    size={'large'}\r\n                        onClick={props.resetValue}\r\n                        className=\"button-style\">\r\n                    RESET\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {Input, TextField} from '@material-ui/core';\r\nimport {InputProps} from \"@material-ui/core/Input/Input\";\r\n\r\nexport type InputElementType = {\r\n    value: number\r\n    changeValue: (value: number) => void\r\n}\r\n\r\nexport function InputElement({value, changeValue, ...restProps}: InputElementType & InputProps) {\r\n    const onValueChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        changeValue(+e.currentTarget.value)\r\n    }\r\n\r\n    return <Input style={{margin: 20}}\r\n                  type=\"number\"\r\n                  value={value}\r\n                  color={'primary'}\r\n                  onChange={onValueChangeHandler} {...restProps}\r\n\r\n    />\r\n}","import React, {useState} from \"react\";\r\nimport {Box, Button} from '@material-ui/core';\r\nimport {InputElement} from \"./InputElement\";\r\nimport {Save} from \"@material-ui/icons\";\r\n\r\n\r\n\r\nexport type SettingsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    setMinValue: (min: number) => void\r\n    setMaxValue: (max: number) => void\r\n    setDisplayValue: () => void\r\n    errorState: boolean\r\n}\r\n\r\n\r\nexport const Settings = (props: SettingsType) => {\r\n\r\nlet errorMax:boolean = (props.maxValue <= props.minValue) || (props.maxValue<0)|| (props.maxValue === props.minValue);\r\nlet errorMin:boolean = (props.minValue<0)|| (props.maxValue === props.minValue);\r\n    return (\r\n<Box>\r\n        <Box>\r\n            <Box style={{margin: 20 }}> max value </Box>\r\n            <InputElement\r\n                value={props.maxValue}\r\n                changeValue={props.setMaxValue}\r\n                error={errorMax}\r\n\r\n            />\r\n            <Box style={{margin: 20 }}> start value </Box>\r\n            <InputElement\r\n                value={props.minValue}\r\n                changeValue={props.setMinValue}\r\n                error={errorMin}\r\n            />\r\n        </Box>\r\n        <Box>\r\n            <Button  style={{margin: \"70px\", justifyContent: 'center'}}\r\n                startIcon={<Save/>}\r\n                size={\"large\"}\r\n                variant='contained'\r\n                color={'secondary'}\r\n                    onClick={props.setDisplayValue}\r\n                    className=\"button-style\"\r\n                   disabled={props.errorState}>\r\n                SET\r\n            </Button>\r\n        </Box>\r\n    </Box>\r\n)};\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {DisplayCounter} from \"./DisplayCounter\";\r\nimport {Box, Container, Grid, Paper} from '@material-ui/core';\r\nimport {Settings} from \"./Settings\";\r\n\r\n\r\nexport function Counter() {\r\n    const [minValue, setMinValue] = useState<number>(0)\r\n    const [maxValue, setMaxValue] = useState<number>(0)\r\n    const [countValue, setCountValue] = useState<any>(0)\r\n    let [error, setError] = useState<string>(\"\")\r\n    let [errorState, setErrorState] = useState<boolean>(false)\r\n\r\n    const increaseValue = () => setCountValue(countValue + 1);\r\n\r\n    const resetValue = () => setCountValue(0);\r\n\r\n    const setDisplayValue = () => {\r\n        setError(\" \")\r\n        setCountValue(minValue)\r\n    }\r\n\r\n    const setMinValueCallback = (val: number) => {\r\n        setMinValue(val)\r\n        errorCase()\r\n    }\r\n    const setMaxValueCallback = (val: number) => {\r\n        setMaxValue(val)\r\n        errorCase()\r\n    }\r\n\r\n    const errorCase = () => {\r\n        if (maxValue === minValue) {\r\n            setError(\"incorrect value\");\r\n            setErrorState(true)\r\n        } else if (minValue < 0) {\r\n            setError(\"incorrect value\");\r\n            setErrorState(true)\r\n        } else if (maxValue < 0) {\r\n            setError(\"incorrect value\");\r\n            setErrorState(true)\r\n        } else if (maxValue < minValue) {\r\n            setError(\"incorrect value\");\r\n            setErrorState(true)\r\n        } else {\r\n            setError(\"enter value and press set\")\r\n            setErrorState(false)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        let maxAsString = localStorage.getItem('maxKey')\r\n        if (maxAsString) {\r\n            setMaxValue(JSON.parse(maxAsString))\r\n        }\r\n        let minAsString = localStorage.getItem('minKey')\r\n        if (minAsString) {\r\n            setMinValue(JSON.parse(minAsString))\r\n\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('maxKey', JSON.stringify(maxValue))\r\n        localStorage.setItem('minKey', JSON.stringify(minValue))\r\n        errorCase()\r\n    }, [maxValue, minValue])\r\n\r\n\r\n    return (\r\n        <Container fixed>\r\n\r\n            <Grid container  spacing={3} style={{padding: \"30px 0px\"}}\r\n                  /*direction=\"row\"*/\r\n                  justify=\"center\"\r\n                  alignItems=\"center\">\r\n\r\n                <Paper style={{margin: 20 }}  elevation={3} >\r\n                    <Settings\r\n                        minValue={minValue}\r\n                        maxValue={maxValue}\r\n                        setMinValue={setMinValueCallback}\r\n                        setMaxValue={setMaxValueCallback}\r\n                        setDisplayValue={setDisplayValue}\r\n                        errorState={errorState}/>\r\n                </Paper>\r\n\r\n                    <Paper style={{margin: 20 }}  elevation={3}>\r\n                        <DisplayCounter\r\n                            increaseValue={increaseValue}\r\n                            resetValue={resetValue}\r\n                            counter={countValue}\r\n                            maxValue={maxValue}\r\n                            minValue={minValue}\r\n                            errorCase={errorCase}\r\n                            error={error}\r\n                            errorState={errorState}/>\r\n                    </Paper>\r\n            </Grid>\r\n\r\n        </Container>\r\n)\r\n}","import React from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter\";\n\n\n\nfunction App() {\n    return (\n\n            <Counter/>\n           );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}